services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: products-service-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-woocommerce}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-12345}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - products-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-woocommerce}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: products-service-app
    restart: unless-stopped
    environment:
      # Database Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-12345}
      POSTGRES_DB: ${POSTGRES_DB:-woocommerce}
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-12345}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-woocommerce}

      # WooCommerce API Configuration
      WOOCOMMERCE_BASE_URL: ${WOOCOMMERCE_BASE_URL:-https://wp-multisite.convertcart.com}
      WOOCOMMERCE_CONSUMER_KEY: ${WOOCOMMERCE_CONSUMER_KEY:-ck_af82ae325fbee1c13f31eb26148f4dea473b0f77}
      WOOCOMMERCE_CONSUMER_SECRET: ${WOOCOMMERCE_CONSUMER_SECRET:-cs_2d8cc467c5b91a80f5ed18dd3c282ee8299c9445}

      # Application Configuration
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      HOST: ${HOST:-0.0.0.0}
      TZ: ${TZ:-UTC}

      # Cron Configuration
      CRON_SCHEDULE: ${CRON_SCHEDULE:-0 */6 * * *}

      # TypeORM Configuration
      TYPEORM_SYNCHRONIZE: ${TYPEORM_SYNCHRONIZE:-true}
      TYPEORM_LOGGING: ${TYPEORM_LOGGING:-false}
    ports:
      - "${PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - products-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: products-service-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - products-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  products-network:
    driver: bridge
